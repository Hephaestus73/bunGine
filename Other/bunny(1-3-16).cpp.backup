//Using SDL, SDL_image, standard in/out, and strings
#include <SDL2/SDL.h>
#include "libs/SDL/SDL_image.h"
#include <stdio.h>
#include <string>
#include <iostream>
using namespace std;
//Screen dimension constants
const int SCREEN_WIDTH = 1024;
const int SCREEN_HEIGHT = 768;
const int MAX_PROJECTILES = 3;
const int FRAME_DELAY = 15; //in ms


#include "libs/LTexture.h"
#include "libs/playerSprite.h"
#include "libs/enemySprite.h"
#include "libs/projectileSprite.h"



//enumerate possible key presses
enum KeyPressSurfaces
{
	KEY_PRESS_SURFACE_DEFAULT,
	KEY_PRESS_SURFACE_UP,
	KEY_PRESS_SURFACE_DOWN,
	KEY_PRESS_SURFACE_LEFT,
	KEY_PRESS_SURFACE_RIGHT,
	KEY_PRESS_SURFACE_TOTAL
};


//Starts up SDL and creates window
bool init();

//Loads media
bool loadMedia();

//Frees media and shuts down SDL
void close();

//Scene sprites
//SDL_Rect gSpriteClips[4][4];


bool init()
{
	//Initialization flag
	bool success = true;

	//Initialize SDL
	if( SDL_Init( SDL_INIT_VIDEO ) < 0 )
	{
		printf( "SDL could not initialize! SDL Error: %s\n", SDL_GetError() );
		success = false;
	}
	else
	{
		//Set texture filtering to linear
		if( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" ) )
		{
			printf( "Warning: Linear texture filtering not enabled!" );
		}

		//Create window
		gWindow = SDL_CreateWindow( "Bunny Game", 0,0/*SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED*/, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
		if( gWindow == NULL )
		{
			printf( "Window could not be created! SDL Error: %s\n", SDL_GetError() );
			success = false;
		}
		else
		{
			//Create renderer for window
			gRenderer = SDL_CreateRenderer( gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
			if( gRenderer == NULL )
			{
				printf( "Renderer could not be created! SDL Error: %s\n", SDL_GetError() );
				success = false;
			}
			else
			{
				//Initialize renderer color
				//Initialize renderer color
				SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0xFF, 0xFF );

				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if( !( IMG_Init(imgFlags) & imgFlags ) )
				{
					printf( "SDL_image could not initialize! SDL_image Error1: %s\n", IMG_GetError() );
					success = false;
				}
			}
		}
	}

	return success;
}

void deathScene()
{
	for(int death=0; death <80;death++)
	{
		SDL_SetRenderDrawColor( gRenderer, 240 - 3*death, 80-death, 80-death, 0xFF );
		SDL_RenderClear( gRenderer );
		SDL_RenderPresent( gRenderer );
		SDL_Delay(FRAME_DELAY*2);
	}
}

void close()
{
	//Destroy window	
	SDL_DestroyRenderer( gRenderer );
	SDL_DestroyWindow( gWindow );
	gWindow = NULL;
	gRenderer = NULL;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}


int main( int argc, char* args[] )
{
	//Start up SDL and create window
	if( !init() )
	{
		printf( "Failed to initialize!\n" );
	}
	else
	{
		//Load media
		playerSprite player(4,4,72,172,2,1,1);
		enemySprite enemy1(4,4,72,172,2,430,50);
		projectileSprite projectiles[MAX_PROJECTILES] = projectileSprite(false,4,4,48,48,2);
						
		if( !player.loadMedia() || !enemy1.loadMedia())
		{
			printf( "Failed to load media!\n" );
		}
		else
		{	
			//Set up player Sprite
			player.generateClips();
			//Set up enemy Sprite
			enemy1.generateClips();
			//Set up projectile Sprite
			
			//Main loop flag	
			bool quit = false;	
			//Event handler	
			SDL_Event e;			
			bool pAction[5] = {false};
			
	/*--------------------------------Main Game Loop--------------------------------*/
	
			while( !quit )
			{				
				//Handle events on queue
				while( SDL_PollEvent( &e ) != 0 )
				{
					{
						//User requests quit
						if( e.type == SDL_QUIT )
						{
							quit = true;
						}
						//User presses a key
						else if( e.type == SDL_KEYDOWN || SDL_KEYUP)
						{
							//set actions based on keys pressed
							switch( e.key.keysym.sym )
							{
								case SDLK_DOWN:
									if(e.type == SDL_KEYDOWN)
									{
										pAction[0]=true;
									}else if(e.type == SDL_KEYUP)
									{
										pAction[0]=false;
										player.resetFrame();
									}
								break;
								case SDLK_UP:
									if(e.type == SDL_KEYDOWN)
									{
										pAction[1]=true;
									}else if(e.type == SDL_KEYUP)
									{
										pAction[1]=false;
										player.resetFrame();
									}
								break;
								case SDLK_LEFT:
									if(e.type == SDL_KEYDOWN)
									{
										pAction[2]=true;
									}else if(e.type == SDL_KEYUP)
									{
										pAction[2]=false;
										player.resetFrame();
									}
								break;
								case SDLK_RIGHT:
									if(e.type == SDL_KEYDOWN)
									{
										pAction[3]=true;
									}else if(e.type == SDL_KEYUP)
									{
										pAction[3]=false;
										player.resetFrame();
									}
								break;
								case SDLK_SPACE:
									if(e.type == SDL_KEYDOWN)
									{
										pAction[4]=true;
									}else if(e.type == SDL_KEYUP)
									{
										pAction[4]=false;
										player.resetFrame();
									}
								default:
								break;
							}
						}
					}
				}				
				
				if(pAction[0]==true)	//move down
				{
					if(pAction[2]==true||pAction[3]==true)
					{
						player.setY(player.getY() + (3*player.getSpeed()));
					}else{
						player.setY(player.getY() + (4*player.getSpeed()));
					}
					player.selectRow(0);
					player.setMoving(true);		
				}
				if(pAction[1]==true)	//move up
				{
					if(pAction[2]==true||pAction[3]==true)
					{
						player.setY(player.getY() - (3*player.getSpeed()));
					}else{
						player.setY(player.getY() - (4*player.getSpeed()));
					}
					player.selectRow(1);
					player.setMoving(true);
				}
				if(pAction[2]==true)	//move left
				{
					if(pAction[0]==true||pAction[1]==true)
					{
						player.setX(player.getX() - (3*player.getSpeed()));
					}else{
						player.setX(player.getX() - (4*player.getSpeed()));
					}
					player.selectRow(2);
					player.setMoving(true);
				}
				if(pAction[3]==true)	//move right
				{
					if(pAction[0]==true||pAction[1]==true)
					{
						player.setX(player.getX() + (3*player.getSpeed()));
					}else{
						player.setX(player.getX() + (4*player.getSpeed()));
					}
					player.selectRow(3);
					player.setMoving(true);
				}
				if(pAction[4]==true)	//fire carrot
				{
					for(int numproj=0;numproj<MAX_PROJECTILES;numproj++)
					{
						if(!projectiles[numproj].doesExist() && player.getprojDelay()<1)
						{
							projectiles[numproj].create(player.getRow(),player.getX(),player.getY()+player.getHeight()/2);
							player.projDelayStart(20);
						}
					}
				}
				

//----------------PROCESS FRAME----------------//

				//Clear screen
				SDL_SetRenderDrawColor( gRenderer, 90, 200, 90, 0xFF );
				SDL_RenderClear( gRenderer );
				//Process Player
				if(player.isMoving()==true)
					player.pushNextFrame();
				player.setMoving(false);
				SDL_Rect temp = player.getClip();
				player.gSpriteSheetTexture.render( player.getX(), player.getY(), &temp );
				player.projDelayIncrement();
				player.checkCollision(enemy1.getX(),enemy1.getY(),enemy1.getWidth(),enemy1.getHeight());
				//Process Enemies
				enemy1.behaviourPassive();
				SDL_Rect temp2 = enemy1.getClip();
				enemy1.gSpriteSheetTexture.render( enemy1.getX(), enemy1.getY(), &temp2 );
				//Process Projectiles
				
				for(int projcount=0;projcount<MAX_PROJECTILES;projcount++)
				{	
					if(projectiles[projcount].doesExist())
					{
						//projectiles[projcount].advance();
						projectiles[projcount].checkCollision(enemy1.getX(),enemy1.getY(),enemy1.getWidth(),enemy1.getHeight());
						projectiles[projcount].advance();
						SDL_Rect projtemp = projectiles[projcount].getClip();
						projectiles[projcount].gSpriteSheetTexture.render( projectiles[projcount].getX(), projectiles[projcount].getY(), &projtemp );
					}
				}
				//Update screen
				SDL_RenderPresent( gRenderer );
				SDL_Delay(FRAME_DELAY);
				if(player.getHealth() == 0)
				{
					quit=true;
					deathScene();
				}
			}
	/*--------------------------------End Main Game Loop--------------------------------*/		
		}
	}
	//Free loaded images
	//player.gSpriteSheetTexture.free();
	//Free resources and close SDL
	close();
	return 0;
}
